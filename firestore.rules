rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Fonction pour vérifier si l'utilisateur est connecté
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction pour vérifier si l'utilisateur est le propriétaire du document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }



    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Règles pour la collection animals
    match /animals/{animalId} {
      // Lecture : admin peut tout lire, utilisateur peut lire ses propres animaux
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      // Création : seul l'admin peut créer
      allow create: if isAdmin();
      // Modification : admin ou propriétaire de l'animal (pour ajouter des rendez-vous)
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin() ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['appointments']))
      );
      // Suppression : seul l'admin peut supprimer
      allow delete: if isAdmin();
    }

    // Règles pour la collection appointments
    match /appointments/{appointmentId} {
      // Lecture : tout utilisateur connecté peut lire (nécessaire pour vérifier les créneaux disponibles)
      allow read: if isAuthenticated();
      
      // Création : utilisateurs authentifiés peuvent créer leurs propres rendez-vous
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Seuls les admins peuvent modifier les rendez-vous
      allow update: if isAdmin();
      
      // Seuls les admins peuvent supprimer les rendez-vous
      allow delete: if isAdmin();
    }

    // Règles pour la collection timeSlots
    match /timeSlots/{slotId} {
      // Lecture : tout utilisateur connecté peut lire
      allow read: if isAuthenticated();
      // Modification : admin ou utilisateur qui crée un rendez-vous
      allow update: if isAdmin() || (
        isAuthenticated() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['unavailable', 'updatedAt'])
      );
      // Création et suppression : seul l'admin peut le faire
      allow create, delete: if isAdmin();
    }

    // Règles pour la collection contact_messages
    match /contact_messages/{messageId} {
      // Tout le monde peut créer un message
      allow create: if true;
      // Les utilisateurs peuvent lire leurs propres messages, les admins peuvent tout lire
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      // Seuls les admins peuvent modifier ou supprimer les messages
      allow update, delete: if isAdmin();
    }

    // Règles pour la collection blog_posts
    match /blog_posts/{postId} {
      // Tout le monde peut lire les articles
      allow read: if true;
      // Seuls les admins peuvent gérer les articles
      allow write: if isAdmin();
    }

    // Collection des services
    match /services/{serviceId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Collection des annotations corporelles
    match /bodyAnnotations/{annotationId} {
      allow read: if isAuthenticated() && (
        resource == null ||
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
    }
  }
} 