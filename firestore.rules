rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Fonction pour vérifier si l'utilisateur est connecté
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction pour vérifier si l'utilisateur est le propriétaire du document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Fonction pour vérifier si un créneau est disponible
    function isSlotAvailable(slotId) {
      let slot = get(/databases/$(database)/documents/timeSlots/$(slotId)).data;
      return !slot.unavailable;
    }

    // Fonction pour vérifier si un créneau existe déjà à la même date et heure
    function hasNoConflictingSlot() {
      let requestDate = request.resource.data.date;
      let requestTime = request.resource.data.time;
      
      return !exists(/databases/$(database)/documents/timeSlots/**) || 
        getAfter(/databases/$(database)/documents/timeSlots/**).size() == 0 ||
        !getAfter(/databases/$(database)/documents/timeSlots)
          .where('date', '==', requestDate)
          .where('time', '==', requestTime)
          .size() > 0;
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Règles pour la collection animals
    match /animals/{animalId} {
      // Lecture : admin peut tout lire, utilisateur peut lire ses propres animaux
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      // Création : seul l'admin peut créer
      allow create: if isAdmin();
      // Modification : seul l'admin peut modifier
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      // Suppression : seul l'admin peut supprimer
      allow delete: if isAdmin();
    }

    // Règles pour la collection appointments
    match /appointments/{appointmentId} {
      // Les utilisateurs peuvent lire leurs propres rendez-vous
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      
      // Seuls les admins peuvent créer des rendez-vous directement
      // Les utilisateurs normaux doivent passer par la fonction Cloud
      allow create: if isAdmin() || (
        isAuthenticated() && 
        request.resource.data.userId == request.auth.uid
      );
      
      // Seuls les admins peuvent modifier les rendez-vous
      allow update: if isAdmin();
      
      // Seuls les admins peuvent supprimer les rendez-vous
      allow delete: if isAdmin();
    }

    // Règles pour la collection timeSlots
    match /timeSlots/{slotId} {
      // Lecture : tout utilisateur connecté peut lire
      allow read: if isAuthenticated();
      // Création, modification, suppression : seul l'admin peut le faire
      allow write: if isAdmin();
    }

    // Règles pour la collection contact_messages
    match /contact_messages/{messageId} {
      // Tout le monde peut créer un message
      allow create: if true;
      // Les utilisateurs peuvent lire leurs propres messages, les admins peuvent tout lire
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      // Seuls les admins peuvent modifier ou supprimer les messages
      allow update, delete: if isAdmin();
    }

    // Règles pour la collection blog_posts
    match /blog_posts/{postId} {
      // Tout le monde peut lire les articles
      allow read: if true;
      // Seuls les admins peuvent gérer les articles
      allow write: if isAdmin();
    }

    // Collection des services
    match /services/{serviceId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Collection des annotations corporelles
    match /bodyAnnotations/{annotationId} {
      allow read: if isAuthenticated() && (
        resource == null ||
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
    }
  }
} 